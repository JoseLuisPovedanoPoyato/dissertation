Installed content to Server:
// Update the libraries, install the required software
	sudo apt-get update
	sudo apt install git
	sudo apt install docker.io
	sudo apt install curl

// Check that docker works
	sudo systemctl start docker
	sudo systemctl status docker

// Install kubernetes and kubectl
	mkdir kubernetes
	cd kubernetes
	 
// Kubectl is the the command line tool we use to interact with the kubernetes cluster, it works with multiple kubernetes deployments
	curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
	sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

// Getting an actual kubernetes distribution installed, to set up the clusters - Going to go with kind
	curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.17.0/kind-linux-amd64
	chmod +x ./kind
	sudo mv ./kind /usr/local/bin/kind

// Create the cluster, this is where kubectl will deploy our images to
	sudo kind create cluster

	// If this gets stucked on "Ensuring node image (kindest/node:${tag})" 
	docker pull kindest/node:${tag} -> rerun command above

	// Creating the cluster should also create a context for kubernetes. It should automatically be added to your user's profile at $HOME/.kube/config
	// Unfortunately this does not always happen. If that's the case copy the kubeconfig into the $HOME/.kube/config (You might have to create the .kube directory too)
	sudo kind get kubeconfig > $HOME/.kube/config

// You can change contexts using
	sudo kubectl config get-contexts
	sudo kubectl config use-context <context_name>


// Now you should be ready to deploy to the cluster.
// Pls note that when creating the docker images for the first time, pip, pipenv and venv are automatically installed