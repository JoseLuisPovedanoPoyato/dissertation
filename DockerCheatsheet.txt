INSTALL DOCKER AND KUBERNETES
-----------------------------------------
Follow this to complete docker setup
https://www.letscloud.io/community/how-to-install-kubernetesk8s-and-docker-on-ubuntu-2004
Follow this to complete Kubernetes set up
https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/


ACTIVATE DOCKER IN LINUX
------------------------------------------
sudo systemctl enable docker
sudo systemctl start docker
sudo systemctl status docker

TO BUILD DOCKER IMAGE AND MAKE IT AVAILABLE IN KUBE
------------------------------------------------------
docker rmi $IMAGE_NAME:IMAGE_VERSION
docker build -t $IMAGE_NAME:IMAGE_VERSION .
kind load docker-image $IMAGE_NAME:IMAGE_VERSION


TO LAUNCH SERVICE ON DOCKER CONTAINER
------------------------------------------------------
docker stop $CONTAINER
docker rm $CONTAINER
docker rmi $IMAGE_NAME:IMAGE_VERSION
docker build -t $IMAGE_NAME:IMAGE_VERSION .
docker run -p $INTERNAL_PORT:$EXTERNAL_PORT --name $IMAGE_NAME $IMAGE_NAME:IMAGE_VERSION

E.G To Launch Sender on Docker
-----------------------------
cd .\MicroServiceSender\
docker stop MicroSender
docker rm MicroSender
docker rmi microsender:1.0
docker build -t microsender:1.0 .
docker run -p 5000:5000 --name MicroSender microsender:1.0


To Launch Receiver on Docker and add image to Kubernetes images
-----------------------------
cd .\MicroServiceReceiver\
docker stop MicroReceiver
docker rm MicroReceiver
docker rmi microreceiver:1.0
docker build -t microreceiver:1.0 .
sudo kind load docker-image microreceiver:1.0
docker run -p 8000:8000 --name MicroReceiver microreceiver:1.0




KUBERNETES CLUSTER COMMANDS
----------------------------------------------
kubectl create -f $MANIFEST.yml
kubectl describe pods/$POD_NAME 

kubectl get pods
kubectl get pods/$POD_NAME
kubectl describe pods/$POD_NAME
kubectl get services

//Opens pod in bash
kubectl exec -it $POD_NAME bash 
// Above is deprecated, Doc recommends
kubectl exec --stdin --tty $CONTAINER -- /bin/bash

// Port forward to localhost
kubectl port-forward $POD_NAME $TARGET_PORT:$FORWARDED_PORT //For some reason only works if $TARGET_PORT = $FORWARDED_PORT


RECEIVER COMMANDS
----------------------------------------------
cd .\MicroServiceReceiver\

// Launch pod and service
kubectl delete deployments/micro-receiver-deployment
kubectl delete pods/micro-receiver
kubectl delete services/micro-receiver-service
kubectl create -f kube_manifest.yml

//Get node port and IP data
kubectl describe service micro-receiver-service
// e.g. $IP_ADDRESS = 10.110.5.139
// $PORT = 80

//SSH into pod
kubectl get pods
kubectl exec --stdin --tty micro-receiver-deployment$POD_NUMBER -- /bin/bash

// Calls localhost and local port - works / Also works without service being established
curl localhost:8000/home
// Calls service through cluster IP, this should work for any deployment in cluster
curl $IP_ADDRESS:$PORT

SENDER COMMANDS
----------------------------------------------
cd .\MicroServiceSender\

// Launch pod and service
kubectl delete deployments/micro-sender-deployment
kubectl delete pods/micro-sender
kubectl delete services/micro-sender-service
kubectl create -f kube_manifest.yml

/Get node port and IP data
kubectl describe service micro-receiver-service
// e.g. $IP_ADDRESS = 10.110.5.139
// $PORT = 80

//SSH into pod
kubectl get pods
kubectl exec --stdin --tty micro-sender-deployment$POD_NUMBER -- /bin/bash

// Calls localhost and local port - works / Also works without service being established
curl localhost:8000/home
// Calls service through cluster IP, this should work for any deployment in cluster
curl $IP_ADDRESS:$PORT
